''
' DRAW - GUI/PALETTE.BM
' =============================================================================
' Palette subs and functions.
'
' @todo
' @author Rick Christy <grymmjack@gmail.com>
'
$INCLUDEONCE

''
' Clamp _RGB32 color value in legal ranges
' @param _UNSIGNED LONG c color to clamp
' @return _UNSIGNED LONG _RGB32 clamped
' 
FUNCTION PAL_clamp_rgb32~& (c~&)
    DIM AS LONG r, g, b
    r& = _RED32(c~&)
    g& = _GREEN32(c~&)
    b& = _BLUE32(c~&)
    IF r& < 0 THEN r& = 0
    IF g& < 0 THEN g& = 0
    IF b& < 0 THEN b& = 0
    IF r& > 255 THEN r& = 255
    IF g& > 255 THEN g& = 255
    IF b& > 255 THEN b& = 255
    PAL_clamp_rgb32 = _RGB32(r&, g&, b&)
END FUNCTION


''
' Returns the _RGB32 color from palette by in index
' @param INTEGER index% to get color for
' @return _UNSIGNED LONG _RGB32 color if found
' 
FUNCTION PAL_color~& (index%)
    DIM AS LONG r, g, b
    r& = _RED32(PAL(index%).value~&)
    g& = _GREEN32(PAL(index%).value~&)
    b& = _BLUE32(PAL(index%).value~&)
    PAL_color = _RGB32(r&, g&, b&)
END FUNCTION


''
' Clamps the color index for the palette to in range
' @param INTEGER index% to clamp
' @return INTEGER clamped palette index
' 
FUNCTION PAL_clamp_color_index% (index%)
    DIM AS INTEGER new_index, u, l
    u% = UBOUND(PAL) : l% = LBOUND(PAL)
    IF index% >= l% AND index% <= u% THEN
        new_index% = index%
    ELSE
        IF index% < l% THEN new_index% = l%
        IF index% > u% THEN new_index% = u%
    END IF
    PAL_clamp_color_index = new_index%
END FUNCTION
